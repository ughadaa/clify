@model CommandModel
@{
    var Command = (CommandModel)ViewData["Command"];
}

<form asp-action="Edit" method="post" class="needs-validation" novalidate>

    <div class="form-row">
        <div class="col-md-4 mb-3">
            <input asp-for="id" type="hidden" value=@Command.id>
        </div>

    </div>

    <div class="form-row">
        <div class="col-md-4 mb-3">
            <label asp-for="name" for="validationCustom01">Command</label>
            <input asp-for="name" class="form-control" id="validationCustom01" placeholder=@Command.name required value="@Command.name">
        </div>

    </div>
    <div class="form-row">
        <div class="col-md-6 mb-3">
            <label asp-for="des" for="validationCustom03">Description</label>
            <input asp-for="des" class="form-control" id="validationCustom03" placeholder=@Command.des required value="@Command.des">
            <div class="invalid-feedback">
                Please provide a valid description.
            </div>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Update</button>
</form>

<script>// Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();</script>